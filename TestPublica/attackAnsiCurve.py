hash_fst_signature = 0x8708878e50041df55aeaf58e1ee03dc723aab45d36d47f4e1d49597b35aa6eb2f29b815b3131a4d8225610e909c4ca2f
fst_signature = (18729973679190817623118111313771828863663483513774837152408759700444959675380395484441782281088986325568028125572313, 
                   20359314114894398883483580278464256322867251438942572866576324564009786523201552170100051340293096655180830624945318)

hash_snd_message = 0x47147e25d90562e96e978cff70ff1c208a482c28ebcc45d3552d62d4eb65c45ed0a7ed1b1c8f998ad9a7240e9bf12e9
snd_signature = (18729973679190817623118111313771828863663483513774837152408759700444959675380395484441782281088986325568028125572313, 
                 33549408991998253599552853970526509375371474724984217940328017323799040205020694232660707492411777350321253243465321)

# Info from NIST
Gx = 26247035095799689268623156744566981891852923491109213387815615900925518854738050089022388053975719786650872476732087
Gy = 8325710961489029985546751289520108179287853048861315594709205902480503199884419224438643760392947333078086511627871
n = 39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643
# End info from NIST

L = n.bit_length() # should be 384
print(L)

z_fst = hash_fst_signature >> (hash_fst_signature.bit_length() - L)
z_snd = hash_snd_message >> (hash_fst_signature.bit_length() - L)

zdiff = (z_fst - z_snd) % n
sdiff = (fst_signature[1] - snd_signature[1]) % n

k = (zdiff * pow(sdiff, -1, n)) % n

d = (((fst_signature[1]*k - z_fst) % n) * pow(fst_signature[0], -1, n)) % n
print("SECRET UNLOCKED ")
print(d)
#https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm#Signature_generation_algorithm